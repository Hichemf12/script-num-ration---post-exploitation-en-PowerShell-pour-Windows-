# Afficher le texte "hichemf" en ASCII art
Write-Output @"
 ######################################### 
 #| |   (_)    | |                   / _|#
 #| |__  _  ___| |__   ___ _ __ ___ | |_ #
 #| '_ \| |/ __| '_ \ / _ \ '_ ` _ \|  _|#
 #| | | | | (__| | | |  __/ | | | | | |  #
 #|_| |_|_|\___|_| |_|\___|_| |_| |_|_|  #
 #########################################   
"@

# Attendre quelques secondes
Start-Sleep -Seconds 5

function Show-Menu {
    Write-Host "==================== Menu ====================" -ForegroundColor Cyan
    Write-Host "1. Afficher des informations système" -ForegroundColor Yellow
    Write-Host "2. Vérifier les services" -ForegroundColor Yellow
    Write-Host "3. Scanner les antivirus" -ForegroundColor Yellow
    Write-Host "4. Configurer un VPN" -ForegroundColor Yellow
    Write-Host "5. Vérifier les utilisateurs avec des mots de passe potentiellement faibles" -ForegroundColor Yellow
    Write-Host "6. Scanner les ports ouverts" -ForegroundColor Yellow
    Write-Host "7. Vérifier les clés de registre vulnérables" -ForegroundColor Yellow
    Write-Host "8. Quitter" -ForegroundColor Yellow
    Write-Host "9. Afficher les noms et groupes" -ForegroundColor Yellow
    Write-Host "10. Découvrir des failles dans l'Active Directory" -ForegroundColor Yellow
    Write-Host "===============================================" -ForegroundColor Cyan
}

function Find-VulnerableRegistryKeys {
    $registryPaths = @(
        "HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\",
        "HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters\",
        "HKLM:\SYSTEM\CurrentControlSet\Services\RemoteAccess\Parameters\",
        "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings\" 
    )

    Write-Host "Recherche des clés de registre vulnérables..." -ForegroundColor Green
    foreach ($path in $registryPaths) {
        try {
            $keys = Get-ChildItem -Path $path -ErrorAction Stop
            foreach ($key in $keys) {
                $properties = Get-ItemProperty -Path $key.PSPath
                foreach ($property in $properties.PSObject.Properties) {
                    if ($property.Name -match "Enable" -and $property.Value -eq 1) {
                        Write-Output "Clé de registre vulnérable trouvée : $($key.PSPath) - Propriété : $($property.Name)"
                    }
                }
            }
        } catch {
            Write-Host "Erreur lors de l'analyse de la clé de registre : $path" -ForegroundColor Red
        }
    }
}

# Boucle pour gérer les choix
do {
    Show-Menu
    $choice = Read-Host "Que veux-tu faire ? (1-10)"
    switch ($choice) {
        '1' {
            Write-Host "Affichage des informations système..." -ForegroundColor Green
            Get-ComputerInfo | Format-Table
        }
        '2' {
            Write-Host "Vérification des services..." -ForegroundColor Green
            Get-Service | Format-Table -AutoSize
        }
        '3' {
            Write-Host "Scanning des antivirus..." -ForegroundColor Green
            Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct
        }
        '4' {
            Write-Host "Configuration d'un VPN..." -ForegroundColor Green
            try {
                Add-VpnConnection -Name "MonVPN" -ServerAddress "vpn.woshub.com" -PassThru -ErrorAction Stop
                Write-Host "VPN configuré avec succès." -ForegroundColor Green
            } catch {
                Write-Host "Erreur lors de la configuration du VPN : $_" -ForegroundColor Red
            }
        }
        '5' {
            Write-Host "Vérification des utilisateurs avec des mots de passe potentiellement faibles..." -ForegroundColor Green
            Start-Sleep -Seconds 3

            $users = Get-LocalUser | Where-Object { $_.PasswordLastSet -lt (Get-Date).AddDays(-90) }
            if ($users.Count -gt 0) {
                Write-Host "Utilisateurs avec des mots de passe potentiellement faibles :" -ForegroundColor Yellow
                foreach ($user in $users) {
                    Write-Output "Utilisateur : $($user.Name)"
                }
            } else {
                Write-Host "Aucun utilisateur avec des mots de passe potentiellement faibles trouvé." -ForegroundColor Green
            }
            Start-Sleep -Seconds 5
        }
        '6' {
            Write-Host "Scanner les ports ouverts..." -ForegroundColor Green
            $ports = 1..1024
            $openPorts = @()
            foreach ($port in $ports) {
                if (Test-NetConnection -ComputerName "localhost" -Port $port -WarningAction SilentlyContinue) {
                    $openPorts += $port
                }
            }
            Write-Host "Ports ouverts détectés : $($openPorts -join ', ')" -ForegroundColor Yellow
        }
        '7' {
            Find-VulnerableRegistryKeys
            Start-Sleep -Seconds 5
        }
        '8' {
            Write-Host "Au revoir !" -ForegroundColor Red
            exit
        }
        '9' {
            Write-Host "Affichage des groupes et utilisateurs locaux..." -ForegroundColor Green
            Get-LocalGroup | ForEach-Object {
                Write-Host "Groupe : $_"
                Get-LocalGroupMember -Group $_ | Select-Object Name | ForEach-Object {
                    Write-Host "  Membre : $($_.Name)"
                }
            }
        }
        '10' {
            Write-Host "Découverte des failles dans l'Active Directory..." -ForegroundColor Green
            
            # Vérifier les services
            Get-WmiObject Win32_Service | Where-Object { 
                $_.StartName -ne "LocalSystem" -and $_.StartName -ne "LocalService" -and $_.StartName -ne "NetworkService" 
            } | Select-Object DisplayName, StartName, State

            # Scanner les fichiers pour des attributs spécifiques
            Get-ChildItem -Path C:\ -Recurse -ErrorAction SilentlyContinue | Where-Object {
                $_.Attributes -match "Archive" -and $_.Attributes -match "ReadOnly"
            } | Select-Object FullName, Attributes

            # Vérifier les partages
            Get-WmiObject Win32_Share | Where-Object { $_.MaximumAllowed -eq 0 } | Select-Object Name, Path, Description
        }

        default {
            Write-Host "Choix invalide, réessaye." -ForegroundColor Red
        }
    }
    Start-Sleep -Seconds 2
} while ($choice -ne '8')
